// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(Marionette) {
    var originalConstructor, _base, _ref;
    if (Marionette.UI == null) {
      Marionette.UI = {};
    }
    if ((_base = Marionette.UI).Widgets == null) {
      _base.Widgets = {};
    }
    Marionette.UI.WidgetManager = (function(_super) {
      __extends(WidgetManager, _super);

      function WidgetManager() {
        this.showWidgets = __bind(this.showWidgets, this);
        _ref = WidgetManager.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      WidgetManager.prototype.initialize = function(options) {
        if (options == null) {
          options = {};
        }
        this.view = options.view;
        this.widgets = options.widgets;
        return this._initializeWidgets();
      };

      WidgetManager.prototype._initializeWidgets = function() {
        var defaults,
          _this = this;
        if (this.widgets == null) {
          return;
        }
        defaults = {
          parentEl: function() {
            return _this.view.$el;
          }
        };
        return this.addRegions(this.widgets, defaults);
      };

      WidgetManager.prototype.showWidgets = function() {
        var collection, model, _ref1,
          _this = this;
        _ref1 = this.view, model = _ref1.model, collection = _ref1.collection;
        return _.each(this.widgets, function(definition, name) {
          var widgetView;
          widgetView = new Marionette.UI.Widgets[definition.widget]({
            model: model,
            collection: collection
          });
          return _this.get(name).show(widgetView);
        });
      };

      return WidgetManager;

    })(Marionette.RegionManager);
    originalConstructor = Marionette.View.prototype.constructor;
    return Marionette.View.prototype.constructor = function() {
      var args, widgets;
      args = Array.prototype.slice.apply(arguments);
      originalConstructor.apply(this, args);
      if ((widgets = Marionette.getOption(this, 'widgets'))) {
        this._widgetManager = new Marionette.UI.WidgetManager({
          view: this,
          widgets: widgets
        });
        return this.listenTo(this, 'show', this._widgetManager.showWidgets);
      }
    };
  })(Marionette);

}).call(this);
